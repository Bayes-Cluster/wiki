# jemdoc: menu{MENU}{installation.html}
== Install Software in Cluster

In default situation, user cannot install software via +root+ authority. However, user can install their needed software under their own +/home/user_name+ directory. Here are some example:

=== Install Python via Anaconda:

Conda can create a virtual python environment, and it easily install packages. This created virtual individual environment can solve the python's version and requirement problem and it is  fully controlled by the user [ you can install packages without root permission ]

. Activate +Anaconda+ PATH
. Create an environment with +conda+
. Use +conda+ or +pip+ to install packages 

~~~
{Create local Python Environment with Conda}{shell}

# activate anaconda PATH
source ~/environment/anaconda-5.3.1

# using conda 
proxychains4 conda create -name=DeepLearning python=3.7

# activate DeepLearning environment via conda
source activate DeepLearning (or conda activate DeepLearning)

# use Beigjing Foreign Studies Univerisy's  Mirrors (https://mirrors.bfsu.edu.cn)
proxychains4 python -m pip config set global.index-url https://mirrors.bfsu.edu.cn/pypi/web/simple
## run program
python main.py 
~~~

~~~
Remember to use +proxychains4+ to do the download or run the programme which needs internet connection.
~~~


=== Install R via Anaconda:

Conda can create a virtual python environment, and it easily install packages. This created virtual individual environment can solve the python's version and requirement problem and it is  fully controlled by the user [ you can install packages without root permission ]

. Activate +Anaconda+ environment
. Create an environment with +conda+

~~~
{Create local R Environment with Conda}{shell}
# activate anaconda PATH
source ~/environment/anaconda-5.3.1
# using conda
proxychains4 conda create -n=r4-base
conda activate r4-base
proxychains4 conda install -c conda-forge r-base #or proxychains4 conda install -c conda-forge/label/gcc7 r-base
# or proxychains4 conda install r-base
## run program
R
~~~

+Tips:+ sometimes we may use +devtools::install_github()+ to install R pacakge directly from GitHub, however, the connection between the school intranet and GitHub server is not robust enough. Here is a solution:

~~~
{install package via the github proxy}
# for example, we want to download the 'GuangchuangYu/nCov2019'
# instead of using devtools::install_github("GuangchuangYu/nCov2019")
# we can try devtools::install_git and remotes::install_git
remotes::install_git("https://github.com.cnpmjs.org/GuangchuangYu/nCov2019") # or
devtools::install_git("https://github.com.cnpmjs.org/GuangchuangYu/nCov2019")
~~~
~~~


You may use [https://mirrors.bfsu.edu.cn \ BFSU Mirrors] to accelerate R package installation:

~~~
{use BFSU CRAN mirrors}{shell}
# add this command to your  ~/.Rprofile
options("repos" = c(CRAN="https://mirrors.bfsu.edu.cn/CRAN/"))
# or, install pakcages with this options
install.packages("{package_name}", repos="https://mirrors.bfsu.edu.cn/CRAN/")
~~~

=== Install Julia via Anaconda:

. Activate +Anaconda+ PATH
. Create an environment with +conda+

~~~
{Create local Julia Environment with Conda}{shell}

# activate anaconda PATH
source ~/environment/anaconda-5.3.1
# using conda
proxychains4 conda create -name=julia_env julia
~~~

You may use [https://mirrors.bfsu.edu.cn \ BFSU Mirrors] to accelerate R package installation:

~~~
{use BFSU CRAN mirrors}{shell}
# add this command to your  ~/.bashrc
export JULIA_PKG_SERVER=https://mirrors.bfsu.edu.cn/julia
# or, install use JuliaZH (package) to change mirrors
add JuliaZH # install `JuliaZU`
using JuliaZH # when using, it will automatically switch to the China's mirrors
JuliaZH.set_mirror("BFSU") # You can also mannually switch to BFSU mirror
JuliaZH.mirrors # Query the upstream information
~~~

=== Install packages wihout sudo privileges

User withou sudo priviledges need to compile the package from source, for example:

~~~
{install from source}{shell}
apt-get source PACKAGE
./configure --prefix=$HOME/{package-PATH}
make
make install
~~~
